name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Build packages for different distributions
  build-packages:
    name: Build packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # x86_64 packages only (ARM64 requires more complex setup)
          - target: x86_64-unknown-linux-gnu
            package_type: deb
            arch: amd64
          - target: x86_64-unknown-linux-gnu
            package_type: rpm
            arch: x86_64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Install packaging tools
      run: |
        if [ "${{ matrix.package_type }}" = "deb" ]; then
          cargo install cargo-deb
        elif [ "${{ matrix.package_type }}" = "rpm" ]; then
          sudo apt-get install -y rpm
          cargo install cargo-generate-rpm
        fi

    - name: Build Debian package
      if: matrix.package_type == 'deb'
      run: |
        cargo deb --target ${{ matrix.target }} --no-build
        mv target/${{ matrix.target }}/debian/*.deb ./r-hyprconfig_${{ github.ref_name }}_${{ matrix.arch }}.deb

    - name: Build RPM package
      if: matrix.package_type == 'rpm'
      run: |
        cargo generate-rpm --target ${{ matrix.target }}
        mv target/${{ matrix.target }}/generate-rpm/*.rpm ./r-hyprconfig-${{ github.ref_name }}-1.${{ matrix.arch }}.rpm

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: r-hyprconfig-${{ matrix.package_type }}-${{ matrix.arch }}
        path: |
          *.deb
          *.rpm

  # Create release with packages
  release:
    name: Create GitHub Release
    needs: [build-packages]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: packages

    - name: Display structure of downloaded files
      run: ls -la packages/

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        files: |
          packages/**/*.deb
          packages/**/*.rpm
        body: |
          ## Installation

          ### Debian/Ubuntu (x86_64)
          ```bash
          wget https://github.com/olafkfreund/r-hyprconfig/releases/download/${{ github.ref_name }}/r-hyprconfig_${{ github.ref_name }}_amd64.deb
          sudo dpkg -i r-hyprconfig_${{ github.ref_name }}_amd64.deb
          sudo apt-get install -f  # Fix dependencies if needed
          ```

          ### Fedora/RHEL/CentOS (x86_64)
          ```bash
          wget https://github.com/olafkfreund/r-hyprconfig/releases/download/${{ github.ref_name }}/r-hyprconfig-${{ github.ref_name }}-1.x86_64.rpm
          sudo rpm -i r-hyprconfig-${{ github.ref_name }}-1.x86_64.rpm
          # Or with dnf:
          sudo dnf install ./r-hyprconfig-${{ github.ref_name }}-1.x86_64.rpm
          ```

          ### With Nix
          ```bash
          nix run github:olafkfreund/r-hyprconfig/${{ github.ref_name }}
          ```

          ### From Source (all architectures)
          ```bash
          git clone https://github.com/olafkfreund/r-hyprconfig.git
          cd r-hyprconfig
          cargo build --release
          sudo cp target/release/r-hyprconfig /usr/local/bin/
          ```

          ### Arch Linux (AUR)
          *AUR package coming soon*

          **Note:** Pre-built packages are available for x86_64 architecture. ARM64 users can compile from source.

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}