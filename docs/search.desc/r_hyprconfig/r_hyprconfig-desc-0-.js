searchState.loadedDescShard("r_hyprconfig", 0, "Enable debug mode\nCustom error types for r-hyprconfig application.\nEnhanced file I/O operations with atomic writes, backup …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTest save functionality without running TUI\nApply current configuration state to Hyprland (for live …\nClose all modals using state manager\nDisplay error message with recovery options to user\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current panel from state manager\nHandle error with automatic recovery attempts\nMain key event handler - routes to appropriate sub-handlers\nHandle undo operation - restore previous configuration …\nCheck if any modal is open using state manager\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSave current configuration changes to disk\nSet current panel using state manager\nShow the batch operations dialog\nShow the configuration import dialog\nShow popup using structured state management\nShow detailed preview of configuration setting changes\nTake a snapshot before making changes\nTest save functionality without running the TUI\nValidate all configuration changes before applying\nValidate configuration option with structured error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAction command for various app actions\nBatch dialog command\nBase trait for all commands\nContext information for command execution\nCommand dispatcher that manages and executes commands\nResult of command execution\nCommand was handled but should continue to next command\nEdit command\nExport dialog command\nFallback command for unhandled keys\nCommand was executed successfully\nHelp system command\nImport dialog command\nNixOS export dialog command\nCommand was not applicable, try next command\nPopup handling command\nPreview dialog command\nQuit command (Esc or ‘q’)\nReload dialog command\nSave dialog command\nSearch command\nCommand was handled and no further commands should be …\nTab navigation command\nVertical navigation command\nCheck if this command can handle the given context\nGet command description for debugging\nExecute the first applicable command\nExecute the command\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate context from current app state\nCheck if any modal is currently open\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet command priority (higher numbers execute first)\nRegister a command\nRegister all default commands\nAttempt to save configuration to a specific path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSave configuration with automatic backup and recovery\nAbort the entire operation\nFile already exists\nAtomic operation failed\nBackup operation failed\nCache-related errors\nHyprctl command not found\nConfiguration-specific error types\nConfiguration file errors\nConfiguration parsing errors\nConfiguration result type alias\nConfiguration validation errors\nConflicting configuration options\nFile corruption detected\nDirectory creation failed\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nHyprctl command execution failed\nFall back to a default value or alternative approach\nEnhanced file operation error types with specific error …\nFile locked by another process\nFile I/O errors\nFile operation result type alias\nGeneric fallback error\nMain application error type\nHyprctl-specific error types\nHyprctl command execution errors\nHyprctl result type alias\nHyprland is not running\nImport/Export errors\nDisk space insufficient\nCorruption or invalid content\nInvalid file format\nInvalid input errors\nInvalid hyprctl option\nInvalid configuration value\nMissing required configuration\nNetwork-related errors\nNixOS-specific errors\nFile not found\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nFile operation interrupted\nFailed to parse hyprctl output\nPermission denied\nPermission errors\nFailed to read file\nRecovery context for error handling\nError recovery strategies\nResult type alias using our custom error\nRetry the operation with exponential backoff\nSkip this operation and continue\nTemporary file operation failed\nTerminal/TUI errors\nHyprctl command timeout\nUI-related errors\nUnsupported configuration option\nAsk user for manual intervention\nFailed to write file\nCreate an atomic operation failed error\nCreate a backup failed error\nCreate a configuration validation error\nCreate a directory creation failed error\nCreate an execution failed error\nCreate a file operation error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a hyprctl error\nCreate an import/export error\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an invalid value error\nDetermine if this error is recoverable with retry\nCheck if this error is recoverable with retry\nCreate a missing required error\nCreate a NixOS error\nCreate a parse error\nCreate a permission error\nCreate a permission denied error with operation context\nCreate a read error with specific reason\nGet recovery strategy for this file error\nCheck if this error suggests Hyprland is not running\nDetermine if this error suggests permission issues\nDetermine if this error suggests insufficient space\nCreate a temporary file error\nCreate a timeout error\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nGet user-friendly error message with recovery suggestions\nGet user-friendly error message with recovery suggestions\nCreate a write error with specific reason\nConfiguration for file operations\nEnhanced file I/O operations with error recovery\nConvenience functions for common file operations\nPerform atomic file replacement\nPerform atomic write using temporary file\nEnable atomic write operations using temporary files\nAttempt to read file contents (internal method)\nAttempt to write file contents with atomic operations …\nCreate a backup of a file with timestamp\nBackup file suffix (e.g., “.backup”)\nCopy file with enhanced error handling\nCreate a timestamped backup of a file\nEnable automatic backup creation before write operations\nPerform direct write (non-atomic)\nEnsure directory exists, creating it if necessary\nEnsure a directory path exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of retry attempts for failed operations\nCreate a new FileOperations instance with default …\nRead file contents with enhanced error handling\nRemove file with error handling\nRead file content with retry on failure\nBase delay between retry attempts in milliseconds\nSafely write content to a file with automatic backup and …\nTemporary file suffix for atomic operations\nVerify file content matches what was written\nEnable file integrity verification after write operations\nCreate a new FileOperations instance with custom …\nWrite content to file with atomic operations and backup\nCache entry for hyprctl responses\nCache statistics for monitoring and debugging\nCache for hyprctl responses to avoid repeated expensive …\nClear all cached data (useful when configuration changes …\nClear expired cache entries\nExecute a hyprctl command with timeout handling\nExecute a hyprctl command with custom timeout (for testing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInternal method to get all options without caching\nInternal method to get binds without caching\nGet cache statistics for debugging/monitoring\nGet a reasonable default value for common options\nInternal method to get layer rules without caching\nGet hyprctl option with automatic retry and recovery\nGet hyprctl option with structured error handling\nInternal method to get option without caching (used by …\nGet current timeout setting\nInternal method to get window rules without caching\nInternal method to get workspace rules without caching\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigure timeout for hyprctl commands\nTimeout for hyprctl commands in milliseconds\nConfiguration exporter that can save configurations in …\nConvert Hyprland config to structured format\nExport current system configuration\nExport a provided Hyprland configuration\nExport structured configuration to specified format\nExtract current configuration from hyprctl\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new exporter with default output directory\nCreate a new exporter with custom output directory\nSupported configuration formats for import/export\nStandard Hyprland .conf format\nJSON format with structured data\nNixOS Home Manager format\nNixOS System configuration format\nCustom r-hyprconfig format with metadata\nStructured configuration data for import/export\nTOML format for human-readable config\nYAML format (alternative to JSON)\nAdd a tag to the configuration\nGet a human-readable description\nGet the file extension for this format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetect format from file extension\nDetect format from file path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet MIME type for this format\nCreate a new structured config with metadata\nSet the source URL for this configuration\nGet a summary of the configuration\nUpdate the modification timestamp\nValidate that the configuration has required fields\nInformation about assets (wallpapers, scripts, etc.)\nTypes of assets that can be imported\nMain configuration importer\nInformation about configuration conflicts\nHow to resolve conflicts\nTypes of conflicts that can occur\nResult of scanning for configuration files\nGitHub repository with optional branch/tag\nHTTP URL to a configuration file\nOptions for import operations\nPreview of what will be imported\nDifferent sources for importing configurations\nSingle local configuration file\nLocal folder containing configuration files\nClassify an asset by its file extension and path\nClone a git repository\nCreate backup of current configuration\nDetect conflicts with existing configuration\nDetermine where an asset should be placed\nDiscover assets (wallpapers, scripts, etc.)\nDiscover configuration files in the source\nDownload a file from HTTP URL\nExecute the actual import\nFind associated files (wallpapers, scripts, etc.)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport assets to their target locations\nImport configuration from any source with preview\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge two configurations\nCreate a new importer\nParse a configuration file into structured format\nParse Hyprland .conf format\nParse other formats (JSON, TOML, YAML)\nPreview what will be imported without actually importing\nScan a directory for configuration files\nScan a single file\nGlobal common pools instance\nCommon object pools for the application\nCommon Hyprland configuration strings that are frequently …\nStatistics for monitoring string interner performance\nObject pool for reusing expensive objects\nStatistics for monitoring object pool performance\nA pooled object that returns itself to the pool when …\nGlobal string interner for commonly used configuration …\nString interner for reducing memory allocation of commonly …\nGet a mutable reference to the pooled object\nGet a reference to the pooled object\nClear the pool\nClear the interner (useful for testing or memory cleanup)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an object from the pool or create a new one\nGet the global common pools\nGet interner statistics\nGet or create an Arc for the given string\nGlobal function to intern strings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the interner is empty\nGet the number of interned strings\nCreate a new instance with all common strings interned\nCreate a new object pool\nCreate common object pools with reasonable defaults\nGet pool statistics\nGet statistics about the interner\nCreate a new object pool with a reset function\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResult of NixOS configuration generation\nEnhanced NixOS configuration generator\nOptions for NixOS configuration generation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate configuration from template\nGenerate flake-based home manager configuration\nGenerate flake-based system configuration\nGenerate Home Manager configuration\nGenerate system configuration\nGenerate NixOS configuration from provided Hyprland config\nGenerate NixOS configuration from current system state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a preview of the generated content (first 20 lines)\nSave the generated configuration to disk\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCache for distribution detection results\nDistribution detector that parses system files to identify …\nInformation about the detected distribution\nSupported Linux distributions\nClear the detection cache (useful for testing)\nDetect the current Linux distribution\nInternal detection logic\nUse os_info crate as last resort\nDetermine distribution type from ID and fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this distribution is based on another distribution\nParse /etc/lsb-release file (fallback)\nParse /etc/os-release or /usr/lib/os-release file\n<code>ToString::to_string</code>, but without panic on OOM.\nRemove quotes from values in key=value pairs\nManages configuration paths across different Linux …\nPath cache for performance optimization\nConfiguration for different types of paths\nClear the path cache (useful for testing)\nCreate a backup of the current configuration\nCreate all directories in the configuration\nFind existing Hyprland configuration files\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet configuration export path for a specific format\nGet path configuration for the current distribution\nInitialize directories for the current distribution\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available backups\nResolve Hyprland configuration directory for different …\nResolve paths specifically for NixOS\nResolve paths based on distribution information\nResolve paths for standard Linux distributions\nValidate that all paths are accessible\nApplication logic state - business logic and data\nDialog states - separate from UI and application logic\nInteractive state - user input and editing\nCentral state manager that composes all state types\nPure UI state - only visual rendering state\nAdd a new configuration item\nCache search result\nClose all dialogs\nClose all open modals\nGet the currently focused panel\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached search result\nGet configuration items for a specific panel\nGet mutable configuration items for a specific panel\nGet the list state for the current panel\nCheck if any dialog is currently open\nCheck if any modal dialog is open\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate cache by incrementing generation\nCheck if currently editing\nRemove a configuration item\nReset all state to defaults\nReset all list states\nSet configuration items for a panel\nChange the current panel\nCheck if search debounce period has elapsed\nShow popup with message\nEnter edit mode for a specific item\nStart search mode\nExit edit mode\nStop search mode\nUpdate a specific configuration item\nUpdate search query\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nFactory for creating commonly used ConfigItems - uses …\nCreate a boolean ConfigItem\nCreate a ConfigItem for border_size\nCollect all configuration changes from the UI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a ConfigItem for gaps_in\nCreate a ConfigItem for gaps_out\nInitialize configuration items with default data\nCreate an integer ConfigItem\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new UI instance with default configuration\nMain render function for the entire UI\nRepresents a snapshot of the entire configuration state\nManages undo/redo operations for configuration changes\nCheck if redo is available\nCheck if undo is available\nClear all undo/redo history\nAll configuration items organized by panel\nGet current snapshot (for debugging/inspection)\nCurrent snapshot (if any)\nOptional description of what changed\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a snapshot from the current UI state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of undo operations to keep in memory\nRedo the last undone operation and return the state\nGet the number of available redo operations\nGet description of the last redo operation\nGet redo stack history (for debugging/UI display)\nStack of undone states (redo stack)\nTake a snapshot of the current state before making changes\nTimestamp when the snapshot was created\nUndo the last operation and return the previous state\nGet the number of available undo operations\nGet description of the last undo operation\nGet undo stack history (for debugging/UI display)\nStack of previous states (undo stack)")