searchState.loadedDescShard("r_hyprconfig", 0, "Enable debug mode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTest save functionality without running TUI\nApply current configuration state to Hyprland (for live …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake a snapshot before making changes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration exporter that can save configurations in …\nConvert Hyprland config to structured format\nExport current system configuration\nExport a provided Hyprland configuration\nExport structured configuration to specified format\nExtract current configuration from hyprctl\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new exporter with default output directory\nCreate a new exporter with custom output directory\nSupported configuration formats for import/export\nStandard Hyprland .conf format\nJSON format with structured data\nNixOS Home Manager format\nNixOS System configuration format\nCustom r-hyprconfig format with metadata\nStructured configuration data for import/export\nTOML format for human-readable config\nYAML format (alternative to JSON)\nAdd a tag to the configuration\nGet a human-readable description\nGet the file extension for this format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetect format from file extension\nDetect format from file path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet MIME type for this format\nCreate a new structured config with metadata\nSet the source URL for this configuration\nGet a summary of the configuration\nUpdate the modification timestamp\nValidate that the configuration has required fields\nInformation about assets (wallpapers, scripts, etc.)\nTypes of assets that can be imported\nMain configuration importer\nInformation about configuration conflicts\nHow to resolve conflicts\nTypes of conflicts that can occur\nResult of scanning for configuration files\nGitHub repository with optional branch/tag\nHTTP URL to a configuration file\nOptions for import operations\nPreview of what will be imported\nDifferent sources for importing configurations\nSingle local configuration file\nLocal folder containing configuration files\nClassify an asset by its file extension and path\nClone a git repository\nCreate backup of current configuration\nDetect conflicts with existing configuration\nDetermine where an asset should be placed\nDiscover assets (wallpapers, scripts, etc.)\nDiscover configuration files in the source\nDownload a file from HTTP URL\nExecute the actual import\nFind associated files (wallpapers, scripts, etc.)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport assets to their target locations\nImport configuration from any source with preview\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge two configurations\nCreate a new importer\nParse a configuration file into structured format\nParse Hyprland .conf format\nParse other formats (JSON, TOML, YAML)\nPreview what will be imported without actually importing\nScan a directory for configuration files\nScan a single file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResult of NixOS configuration generation\nEnhanced NixOS configuration generator\nOptions for NixOS configuration generation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate configuration from template\nGenerate flake-based home manager configuration\nGenerate flake-based system configuration\nGenerate Home Manager configuration\nGenerate system configuration\nGenerate NixOS configuration from provided Hyprland config\nGenerate NixOS configuration from current system state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a preview of the generated content (first 20 lines)\nSave the generated configuration to disk\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCache for distribution detection results\nDistribution detector that parses system files to identify …\nInformation about the detected distribution\nSupported Linux distributions\nClear the detection cache (useful for testing)\nDetect the current Linux distribution\nInternal detection logic\nUse os_info crate as last resort\nDetermine distribution type from ID and fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this distribution is based on another distribution\nParse /etc/lsb-release file (fallback)\nParse /etc/os-release or /usr/lib/os-release file\n<code>ToString::to_string</code>, but without panic on OOM.\nRemove quotes from values in key=value pairs\nManages configuration paths across different Linux …\nPath cache for performance optimization\nConfiguration for different types of paths\nClear the path cache (useful for testing)\nCreate a backup of the current configuration\nCreate all directories in the configuration\nFind existing Hyprland configuration files\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet configuration export path for a specific format\nGet path configuration for the current distribution\nInitialize directories for the current distribution\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available backups\nResolve Hyprland configuration directory for different …\nResolve paths specifically for NixOS\nResolve paths based on distribution information\nResolve paths for standard Linux distributions\nValidate that all paths are accessible\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a snapshot of the entire configuration state\nManages undo/redo operations for configuration changes\nCheck if redo is available\nCheck if undo is available\nClear all undo/redo history\nAll configuration items organized by panel\nGet current snapshot (for debugging/inspection)\nCurrent snapshot (if any)\nOptional description of what changed\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a snapshot from the current UI state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of undo operations to keep in memory\nRedo the last undone operation and return the state\nGet the number of available redo operations\nGet description of the last redo operation\nGet redo stack history (for debugging/UI display)\nStack of undone states (redo stack)\nTake a snapshot of the current state before making changes\nTimestamp when the snapshot was created\nUndo the last operation and return the previous state\nGet the number of available undo operations\nGet description of the last undo operation\nGet undo stack history (for debugging/UI display)\nStack of previous states (undo stack)")